name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  NODE_VERSION: '20'

jobs:
  install:
    name: Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install root dependencies
        run: npm ci

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Install shared dependencies
        working-directory: ./shared
        run: npm ci

      - name: Generate Prisma Client
        working-directory: ./backend
        run: npx prisma generate

      - name: Cache dependencies
        uses: actions/cache/save@v4
        with:
          path: |
            node_modules
            backend/node_modules
            frontend/node_modules
            shared/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

  typecheck:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            backend/node_modules
            frontend/node_modules
            shared/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Generate Prisma Client
        working-directory: ./backend
        run: npx prisma generate

      - name: Type check backend
        working-directory: ./backend
        run: npm run build

      - name: Type check frontend
        working-directory: ./frontend
        run: npx tsc -b --noEmit

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            backend/node_modules
            frontend/node_modules
            shared/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Lint frontend
        working-directory: ./frontend
        run: npm run lint

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: install
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: shader_playground_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DATABASE_URL: file:./prisma/test.db/test_user:test_password@localhost:5432/shader_playground_test
      JWT_SECRET: test-jwt-secret-for-ci
      GOOGLE_CLIENT_ID: test-client-id
      GOOGLE_CLIENT_SECRET: test-client-secret
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            backend/node_modules
            frontend/node_modules
            shared/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Generate Prisma Client
        working-directory: ./backend
        run: npx prisma generate

      - name: Run Prisma migrations
        working-directory: ./backend
        run: npx prisma migrate deploy

      - name: Run backend tests with coverage
        working-directory: ./backend
        run: npm run test:coverage

      - name: Run frontend tests with coverage
        working-directory: ./frontend
        run: npm run test:coverage

      - name: Upload backend coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage

      - name: Upload frontend coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            backend/node_modules
            frontend/node_modules
            shared/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Generate Prisma Client
        working-directory: ./backend
        run: npx prisma generate

      - name: Build backend
        working-directory: ./backend
        run: npm run build

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
