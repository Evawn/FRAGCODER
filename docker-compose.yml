# Docker Compose configuration for Shader Playground
# Orchestrates frontend, backend, and PostgreSQL database services

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: shader-playground-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: shader_user
      POSTGRES_PASSWORD: shader_password
      POSTGRES_DB: shader_playground
      POSTGRES_INITDB_ARGS: "-E UTF8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U shader_user -d shader_playground"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - shader-network

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: shader-playground-backend
    restart: unless-stopped
    environment:
      # Database connection
      DATABASE_URL: postgresql://shader_user:shader_password@postgres:5432/shader_playground

      # Server configuration
      PORT: 3001
      NODE_ENV: production

      # CORS configuration
      FRONTEND_URL: http://localhost:5173

      # JWT secret - CHANGE THIS IN PRODUCTION!
      JWT_SECRET: ${JWT_SECRET:-change-this-to-a-secure-random-32-char-string}

      # Google OAuth - REQUIRED: Add your Google Client ID
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      # Mount for development hot-reload (optional, comment out for production)
      # - ./backend/src:/app/src
      - backend_logs:/app/logs
    networks:
      - shader-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (r) => { process.exit(r.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s

  # Frontend React App (served by nginx)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        # Pass Google Client ID to frontend build (required for OAuth)
        VITE_GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
    container_name: shader-playground-frontend
    restart: unless-stopped
    ports:
      - "5173:5173"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - shader-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5173/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

# Persistent volumes
volumes:
  postgres_data:
    name: shader-playground-postgres-data
  backend_logs:
    name: shader-playground-backend-logs

# Network configuration
networks:
  shader-network:
    name: shader-playground-network
    driver: bridge
